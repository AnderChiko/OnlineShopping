============== devops ==============
All the necessary devops files are found in the devops folder at the root of the project

============== ensure installed on iis server ==============

- url rewrite module (https://www.iis.net/downloads/microsoft/url-rewrite)
- add url rewrite variables: HTTP_REQUEST_FILENAME_FILE and HTTP_REQUEST_FILENAME_ROOT

============== run deploy exe files ==============

--- INTERNAL ENV DEPLOYS ---
These should happen using the Gitlab pipelines setup
The Gitlab pipeline will run the bat or deploy file automatically in the pipeline script (gitlab-ci-yml file) which 
	should automatically deploy to the internal environment when released (dev or qc)

--- WCG DEPLOY ---
1. Download the dev or qc release artifacts from the Gitlab pipeline that ran succesfully and that you are wanting to deploy (https://docs.gitlab.com/ee/ci/pipelines/pipeline_artifacts.html)
2. In the artifact zip will be a EMCI_Deploy.exe
3. Copy that over to the server into a folder (suggestion create folder called 00.Deploy)
4. On the server open CMD in adminstrator mode and navigate to above folder
5. On the server run EMCI_Deploy.exe with parameters [drive] [env] [versionNo] [site] e.g. EMCI_Deploy.exe C dev 366 wcg
6. That should extract the deployment into the 00.Application folder which the IIS EMCI UI website is pointing to, overriding latest and populating the release version
7. At this point the deployment should be completed, check that the latest and release version got copied into the 00.Application folder succesfully

============== web.config ==============

- ensure web.config is in ui website (web.config is in src of angular project), it should copy as part of the deploy above automatically
- ensure web.config is enabled for url rewrite rules. This allows refreshing of browser without losing context and getting a 404 error
	<rewrite>
			<rules>
				<rule name="HTTPS force" enabled="true" stopProcessing="true">
					<match url="(.*)" />
					<conditions>
						<add input="{HTTPS}" pattern="^OFF$" />
					</conditions>
					<action type="Redirect" url="https://{HTTP_HOST}{REQUEST_URI}" redirectType="Permanent" />
				</rule>
				<rule name="Parse Request File Names" stopProcessing="false">
					<match url=".*" />
					<conditions trackAllCaptures="true">
                        <add input="{REQUEST_FILENAME}" pattern="(.*)latest(.*)" />
					</conditions>
					<serverVariables>
                        <set name="HTTP_REQUEST_FILENAME_ROOT" value="{C:1}" />
                        <set name="HTTP_REQUEST_FILENAME_FILE" value="{C:2}" />
					</serverVariables>
                    <action type="None" />
				</rule>
				<rule name="Fallback AngularJS Routes Non Files" stopProcessing="true">
					<match url=".*" />
					<conditions logicalGrouping="MatchAll">
						<add input="{HTTP_REQUEST_FILENAME_ROOT}latest{HTTP_REQUEST_FILENAME_FILE}" matchType="IsFile" negate="true" />
					</conditions>
					<action type="Rewrite" url="/index.html?{HTTP_REQUEST_FILENAME_ROOT}latest{HTTP_REQUEST_FILENAME_FILE}{REQUEST_FILENAME}" logRewrittenUrl="true" />
				</rule>
				<rule name="Fallback AngularJS Routes Actual Files" stopProcessing="true">
					<match url=".*" />
					<action type="Rewrite" url="/{HTTP_REQUEST_FILENAME_FILE}?{HTTP_REQUEST_FILENAME_ROOT}latest{HTTP_REQUEST_FILENAME_FILE}{REQUEST_FILENAME}" logRewrittenUrl="true" />
				</rule>
			</rules>
		</rewrite>