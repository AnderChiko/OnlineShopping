//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @param body (optional)
   * @return Success
   */
  login(body: Login | undefined): Promise<LoginResultApiResponse> {
    let url_ = this.baseUrl + "/api/Login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        "Accept": "text/plain"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processLogin(_response);
    });
  }

  protected processLogin(response: Response): Promise<LoginResultApiResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LoginResultApiResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<LoginResultApiResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  place(body: Order | undefined): Promise<OrderApiResponse> {
    let url_ = this.baseUrl + "/api/Order/Place";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        "Accept": "text/plain"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processPlace(_response);
    });
  }

  protected processPlace(response: Response): Promise<OrderApiResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderApiResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderApiResponse>(null as any);
  }

  /**
   * @return Success
   */
  get(): Promise<ProductListApiResponse> {
    let url_ = this.baseUrl + "/api/Product/Get";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "text/plain"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGet(_response);
    });
  }

  protected processGet(response: Response): Promise<ProductListApiResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductListApiResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ProductListApiResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(body: User | undefined): Promise<UserApiResponse> {
    let url_ = this.baseUrl + "/api/User/Register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        "Accept": "text/plain"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRegister(_response);
    });
  }

  protected processRegister(response: Response): Promise<UserApiResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserApiResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<UserApiResponse>(null as any);
  }
}

export class Login implements ILogin {
  emailAddress!: string;
  password!: string;

  constructor(data?: ILogin) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.emailAddress = _data["emailAddress"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): Login {
    data = typeof data === 'object' ? data : {};
    let result = new Login();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["emailAddress"] = this.emailAddress;
    data["password"] = this.password;
    return data;
  }
}

export interface ILogin {
  emailAddress: string;
  password: string;
}

export class Version implements IVersion {
  readonly major?: number;
  readonly minor?: number;
  readonly build?: number;
  readonly revision?: number;
  readonly majorRevision?: number;
  readonly minorRevision?: number;

  constructor(data?: IVersion) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).major = _data["major"];
      (<any>this).minor = _data["minor"];
      (<any>this).build = _data["build"];
      (<any>this).revision = _data["revision"];
      (<any>this).majorRevision = _data["majorRevision"];
      (<any>this).minorRevision = _data["minorRevision"];
    }
  }

  static fromJS(data: any): Version {
    data = typeof data === 'object' ? data : {};
    let result = new Version();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["major"] = this.major;
    data["minor"] = this.minor;
    data["build"] = this.build;
    data["revision"] = this.revision;
    data["majorRevision"] = this.majorRevision;
    data["minorRevision"] = this.minorRevision;
    return data;
  }
}

export interface IVersion {
  major?: number;
  minor?: number;
  build?: number;
  revision?: number;
  majorRevision?: number;
  minorRevision?: number;
}

export class StringStringIEnumerableKeyValuePair implements IStringStringIEnumerableKeyValuePair {
  readonly key?: string | undefined;
  readonly value?: string[] | undefined;

  constructor(data?: IStringStringIEnumerableKeyValuePair) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).key = _data["key"];
      if (Array.isArray(_data["value"])) {
        (<any>this).value = [] as any;
        for (let item of _data["value"])
          (<any>this).value!.push(item);
      }
    }
  }

  static fromJS(data: any): StringStringIEnumerableKeyValuePair {
    data = typeof data === 'object' ? data : {};
    let result = new StringStringIEnumerableKeyValuePair();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["key"] = this.key;
    if (Array.isArray(this.value)) {
      data["value"] = [];
      for (let item of this.value)
        data["value"].push(item);
    }
    return data;
  }
}

export interface IStringStringIEnumerableKeyValuePair {
  key?: string | undefined;
  value?: string[] | undefined;
}

export class HttpContent implements IHttpContent {
  readonly headers?: StringStringIEnumerableKeyValuePair[] | undefined;

  constructor(data?: IHttpContent) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["headers"])) {
        (<any>this).headers = [] as any;
        for (let item of _data["headers"])
          (<any>this).headers!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
    }
  }

  static fromJS(data: any): HttpContent {
    data = typeof data === 'object' ? data : {};
    let result = new HttpContent();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.headers)) {
      data["headers"] = [];
      for (let item of this.headers)
        data["headers"].push(item.toJSON());
    }
    return data;
  }
}

export interface IHttpContent {
  headers?: StringStringIEnumerableKeyValuePair[] | undefined;
}

export enum HttpStatusCode {
  _100 = 100,
  _101 = 101,
  _102 = 102,
  _103 = 103,
  _200 = 200,
  _201 = 201,
  _202 = 202,
  _203 = 203,
  _204 = 204,
  _205 = 205,
  _206 = 206,
  _207 = 207,
  _208 = 208,
  _226 = 226,
  _300 = 300,
  _301 = 301,
  _302 = 302,
  _303 = 303,
  _304 = 304,
  _305 = 305,
  _306 = 306,
  _307 = 307,
  _308 = 308,
  _400 = 400,
  _401 = 401,
  _402 = 402,
  _403 = 403,
  _404 = 404,
  _405 = 405,
  _406 = 406,
  _407 = 407,
  _408 = 408,
  _409 = 409,
  _410 = 410,
  _411 = 411,
  _412 = 412,
  _413 = 413,
  _414 = 414,
  _415 = 415,
  _416 = 416,
  _417 = 417,
  _421 = 421,
  _422 = 422,
  _423 = 423,
  _424 = 424,
  _426 = 426,
  _428 = 428,
  _429 = 429,
  _431 = 431,
  _451 = 451,
  _500 = 500,
  _501 = 501,
  _502 = 502,
  _503 = 503,
  _504 = 504,
  _505 = 505,
  _506 = 506,
  _507 = 507,
  _508 = 508,
  _510 = 510,
  _511 = 511,
}

export enum HttpVersionPolicy {
  _0 = 0,
  _1 = 1,
  _2 = 2,
}

export class HttpMethod implements IHttpMethod {
  readonly method?: string | undefined;

  constructor(data?: IHttpMethod) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).method = _data["method"];
    }
  }

  static fromJS(data: any): HttpMethod {
    data = typeof data === 'object' ? data : {};
    let result = new HttpMethod();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["method"] = this.method;
    return data;
  }
}

export interface IHttpMethod {
  method?: string | undefined;
}

export class HttpRequestMessage implements IHttpRequestMessage {
  version?: Version;
  versionPolicy?: HttpVersionPolicy;
  content?: HttpContent;
  method?: HttpMethod;
  requestUri?: string | undefined;
  readonly headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  readonly properties?: { [key: string]: any; } | undefined;
  readonly options?: { [key: string]: any; } | undefined;

  constructor(data?: IHttpRequestMessage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.version = _data["version"] ? Version.fromJS(_data["version"]) : <any>undefined;
      this.versionPolicy = _data["versionPolicy"];
      this.content = _data["content"] ? HttpContent.fromJS(_data["content"]) : <any>undefined;
      this.method = _data["method"] ? HttpMethod.fromJS(_data["method"]) : <any>undefined;
      this.requestUri = _data["requestUri"];
      if (Array.isArray(_data["headers"])) {
        (<any>this).headers = [] as any;
        for (let item of _data["headers"])
          (<any>this).headers!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      if (_data["properties"]) {
        (<any>this).properties = {} as any;
        for (let key in _data["properties"]) {
          if (_data["properties"].hasOwnProperty(key))
            (<any>(<any>this).properties)![key] = _data["properties"][key];
        }
      }
      if (_data["options"]) {
        (<any>this).options = {} as any;
        for (let key in _data["options"]) {
          if (_data["options"].hasOwnProperty(key))
            (<any>(<any>this).options)![key] = _data["options"][key];
        }
      }
    }
  }

  static fromJS(data: any): HttpRequestMessage {
    data = typeof data === 'object' ? data : {};
    let result = new HttpRequestMessage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["version"] = this.version ? this.version.toJSON() : <any>undefined;
    data["versionPolicy"] = this.versionPolicy;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    data["method"] = this.method ? this.method.toJSON() : <any>undefined;
    data["requestUri"] = this.requestUri;
    if (Array.isArray(this.headers)) {
      data["headers"] = [];
      for (let item of this.headers)
        data["headers"].push(item.toJSON());
    }
    if (this.properties) {
      data["properties"] = {};
      for (let key in this.properties) {
        if (this.properties.hasOwnProperty(key))
          (<any>data["properties"])[key] = this.properties[key];
      }
    }
    if (this.options) {
      data["options"] = {};
      for (let key in this.options) {
        if (this.options.hasOwnProperty(key))
          (<any>data["options"])[key] = this.options[key];
      }
    }
    return data;
  }
}

export interface IHttpRequestMessage {
  version?: Version;
  versionPolicy?: HttpVersionPolicy;
  content?: HttpContent;
  method?: HttpMethod;
  requestUri?: string | undefined;
  headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  properties?: { [key: string]: any; } | undefined;
  options?: { [key: string]: any; } | undefined;
}

export enum Status {
  _0 = 0,
  _1 = 1,
  _2 = 2,
}

export class LoginResult implements ILoginResult {
  token?: string | undefined;
  expireDateTime?: Date | undefined;

  constructor(data?: ILoginResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"];
      this.expireDateTime = _data["expireDateTime"] ? new Date(_data["expireDateTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): LoginResult {
    data = typeof data === 'object' ? data : {};
    let result = new LoginResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token;
    data["expireDateTime"] = this.expireDateTime ? this.expireDateTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface ILoginResult {
  token?: string | undefined;
  expireDateTime?: Date | undefined;
}

export class LoginResultApiResponse implements ILoginResultApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  readonly headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  readonly trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  readonly isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: LoginResult;

  constructor(data?: ILoginResultApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.version = _data["version"] ? Version.fromJS(_data["version"]) : <any>undefined;
      this.content = _data["content"] ? HttpContent.fromJS(_data["content"]) : <any>undefined;
      this.statusCode = _data["statusCode"];
      this.reasonPhrase = _data["reasonPhrase"];
      if (Array.isArray(_data["headers"])) {
        (<any>this).headers = [] as any;
        for (let item of _data["headers"])
          (<any>this).headers!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      if (Array.isArray(_data["trailingHeaders"])) {
        (<any>this).trailingHeaders = [] as any;
        for (let item of _data["trailingHeaders"])
          (<any>this).trailingHeaders!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      this.requestMessage = _data["requestMessage"] ? HttpRequestMessage.fromJS(_data["requestMessage"]) : <any>undefined;
      (<any>this).isSuccessStatusCode = _data["isSuccessStatusCode"];
      this.httpResponseCode = _data["httpResponseCode"];
      this.responseMessage = _data["responseMessage"];
      this.status = _data["status"];
      this.responseObject = _data["responseObject"] ? LoginResult.fromJS(_data["responseObject"]) : <any>undefined;
    }
  }

  static fromJS(data: any): LoginResultApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new LoginResultApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["version"] = this.version ? this.version.toJSON() : <any>undefined;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    data["statusCode"] = this.statusCode;
    data["reasonPhrase"] = this.reasonPhrase;
    if (Array.isArray(this.headers)) {
      data["headers"] = [];
      for (let item of this.headers)
        data["headers"].push(item.toJSON());
    }
    if (Array.isArray(this.trailingHeaders)) {
      data["trailingHeaders"] = [];
      for (let item of this.trailingHeaders)
        data["trailingHeaders"].push(item.toJSON());
    }
    data["requestMessage"] = this.requestMessage ? this.requestMessage.toJSON() : <any>undefined;
    data["isSuccessStatusCode"] = this.isSuccessStatusCode;
    data["httpResponseCode"] = this.httpResponseCode;
    data["responseMessage"] = this.responseMessage;
    data["status"] = this.status;
    data["responseObject"] = this.responseObject ? this.responseObject.toJSON() : <any>undefined;
    return data;
  }
}

export interface ILoginResultApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: LoginResult;
}

export class OrderItems implements IOrderItems {
  id?: number;
  orderId?: number;
  productId?: number;
  unitPrice?: number;
  quantity?: number;
  vat?: number;
  price?: number;

  constructor(data?: IOrderItems) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.orderId = _data["orderId"];
      this.productId = _data["productId"];
      this.unitPrice = _data["unitPrice"];
      this.quantity = _data["quantity"];
      this.vat = _data["vat"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): OrderItems {
    data = typeof data === 'object' ? data : {};
    let result = new OrderItems();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["orderId"] = this.orderId;
    data["productId"] = this.productId;
    data["unitPrice"] = this.unitPrice;
    data["quantity"] = this.quantity;
    data["vat"] = this.vat;
    data["price"] = this.price;
    return data;
  }
}

export interface IOrderItems {
  id?: number;
  orderId?: number;
  productId?: number;
  unitPrice?: number;
  quantity?: number;
  vat?: number;
  price?: number;
}

export class Order implements IOrder {
  id?: number;
  userId?: number;
  dateCreated?: Date;
  oderItems?: OrderItems[] | undefined;

  constructor(data?: IOrder) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
      if (Array.isArray(_data["oderItems"])) {
        this.oderItems = [] as any;
        for (let item of _data["oderItems"])
          this.oderItems!.push(OrderItems.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Order {
    data = typeof data === 'object' ? data : {};
    let result = new Order();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
    if (Array.isArray(this.oderItems)) {
      data["oderItems"] = [];
      for (let item of this.oderItems)
        data["oderItems"].push(item.toJSON());
    }
    return data;
  }
}

export interface IOrder {
  id?: number;
  userId?: number;
  dateCreated?: Date;
  oderItems?: OrderItems[] | undefined;
}

export class OrderApiResponse implements IOrderApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  readonly headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  readonly trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  readonly isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: Order;

  constructor(data?: IOrderApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.version = _data["version"] ? Version.fromJS(_data["version"]) : <any>undefined;
      this.content = _data["content"] ? HttpContent.fromJS(_data["content"]) : <any>undefined;
      this.statusCode = _data["statusCode"];
      this.reasonPhrase = _data["reasonPhrase"];
      if (Array.isArray(_data["headers"])) {
        (<any>this).headers = [] as any;
        for (let item of _data["headers"])
          (<any>this).headers!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      if (Array.isArray(_data["trailingHeaders"])) {
        (<any>this).trailingHeaders = [] as any;
        for (let item of _data["trailingHeaders"])
          (<any>this).trailingHeaders!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      this.requestMessage = _data["requestMessage"] ? HttpRequestMessage.fromJS(_data["requestMessage"]) : <any>undefined;
      (<any>this).isSuccessStatusCode = _data["isSuccessStatusCode"];
      this.httpResponseCode = _data["httpResponseCode"];
      this.responseMessage = _data["responseMessage"];
      this.status = _data["status"];
      this.responseObject = _data["responseObject"] ? Order.fromJS(_data["responseObject"]) : <any>undefined;
    }
  }

  static fromJS(data: any): OrderApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new OrderApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["version"] = this.version ? this.version.toJSON() : <any>undefined;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    data["statusCode"] = this.statusCode;
    data["reasonPhrase"] = this.reasonPhrase;
    if (Array.isArray(this.headers)) {
      data["headers"] = [];
      for (let item of this.headers)
        data["headers"].push(item.toJSON());
    }
    if (Array.isArray(this.trailingHeaders)) {
      data["trailingHeaders"] = [];
      for (let item of this.trailingHeaders)
        data["trailingHeaders"].push(item.toJSON());
    }
    data["requestMessage"] = this.requestMessage ? this.requestMessage.toJSON() : <any>undefined;
    data["isSuccessStatusCode"] = this.isSuccessStatusCode;
    data["httpResponseCode"] = this.httpResponseCode;
    data["responseMessage"] = this.responseMessage;
    data["status"] = this.status;
    data["responseObject"] = this.responseObject ? this.responseObject.toJSON() : <any>undefined;
    return data;
  }
}

export interface IOrderApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: Order;
}

export class Product implements IProduct {
  id?: number;
  name?: string | undefined;
  description?: string | undefined;
  imageUrl?: string | undefined;
  isActive?: boolean;
  isDeleted?: boolean;
  dateCreated?: Date;

  constructor(data?: IProduct) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.imageUrl = _data["imageUrl"];
      this.isActive = _data["isActive"];
      this.isDeleted = _data["isDeleted"];
      this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): Product {
    data = typeof data === 'object' ? data : {};
    let result = new Product();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["imageUrl"] = this.imageUrl;
    data["isActive"] = this.isActive;
    data["isDeleted"] = this.isDeleted;
    data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
    return data;
  }
}

export interface IProduct {
  id?: number;
  name?: string | undefined;
  description?: string | undefined;
  imageUrl?: string | undefined;
  isActive?: boolean;
  isDeleted?: boolean;
  dateCreated?: Date;
}

export class ProductListApiResponse implements IProductListApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  readonly headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  readonly trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  readonly isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: Product[] | undefined;

  constructor(data?: IProductListApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.version = _data["version"] ? Version.fromJS(_data["version"]) : <any>undefined;
      this.content = _data["content"] ? HttpContent.fromJS(_data["content"]) : <any>undefined;
      this.statusCode = _data["statusCode"];
      this.reasonPhrase = _data["reasonPhrase"];
      if (Array.isArray(_data["headers"])) {
        (<any>this).headers = [] as any;
        for (let item of _data["headers"])
          (<any>this).headers!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      if (Array.isArray(_data["trailingHeaders"])) {
        (<any>this).trailingHeaders = [] as any;
        for (let item of _data["trailingHeaders"])
          (<any>this).trailingHeaders!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      this.requestMessage = _data["requestMessage"] ? HttpRequestMessage.fromJS(_data["requestMessage"]) : <any>undefined;
      (<any>this).isSuccessStatusCode = _data["isSuccessStatusCode"];
      this.httpResponseCode = _data["httpResponseCode"];
      this.responseMessage = _data["responseMessage"];
      this.status = _data["status"];
      if (Array.isArray(_data["responseObject"])) {
        this.responseObject = [] as any;
        for (let item of _data["responseObject"])
          this.responseObject!.push(Product.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ProductListApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ProductListApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["version"] = this.version ? this.version.toJSON() : <any>undefined;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    data["statusCode"] = this.statusCode;
    data["reasonPhrase"] = this.reasonPhrase;
    if (Array.isArray(this.headers)) {
      data["headers"] = [];
      for (let item of this.headers)
        data["headers"].push(item.toJSON());
    }
    if (Array.isArray(this.trailingHeaders)) {
      data["trailingHeaders"] = [];
      for (let item of this.trailingHeaders)
        data["trailingHeaders"].push(item.toJSON());
    }
    data["requestMessage"] = this.requestMessage ? this.requestMessage.toJSON() : <any>undefined;
    data["isSuccessStatusCode"] = this.isSuccessStatusCode;
    data["httpResponseCode"] = this.httpResponseCode;
    data["responseMessage"] = this.responseMessage;
    data["status"] = this.status;
    if (Array.isArray(this.responseObject)) {
      data["responseObject"] = [];
      for (let item of this.responseObject)
        data["responseObject"].push(item.toJSON());
    }
    return data;
  }
}

export interface IProductListApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: Product[] | undefined;
}

export class UserToken implements IUserToken {
  id?: number;
  userId?: number;
  token?: string | undefined;
  tokenExpireTime?: Date | undefined;
  dateTimeCreated?: Date;
  user?: User;

  constructor(data?: IUserToken) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.token = _data["token"];
      this.tokenExpireTime = _data["tokenExpireTime"] ? new Date(_data["tokenExpireTime"].toString()) : <any>undefined;
      this.dateTimeCreated = _data["dateTimeCreated"] ? new Date(_data["dateTimeCreated"].toString()) : <any>undefined;
      this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
    }
  }

  static fromJS(data: any): UserToken {
    data = typeof data === 'object' ? data : {};
    let result = new UserToken();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["token"] = this.token;
    data["tokenExpireTime"] = this.tokenExpireTime ? this.tokenExpireTime.toISOString() : <any>undefined;
    data["dateTimeCreated"] = this.dateTimeCreated ? this.dateTimeCreated.toISOString() : <any>undefined;
    data["user"] = this.user ? this.user.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUserToken {
  id?: number;
  userId?: number;
  token?: string | undefined;
  tokenExpireTime?: Date | undefined;
  dateTimeCreated?: Date;
  user?: User;
}

export class User implements IUser {
  id?: number;
  emailAddress?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
  salt?: string | undefined;
  userTokens?: UserToken[] | undefined;

  constructor(data?: IUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.emailAddress = _data["emailAddress"];
      this.password = _data["password"];
      this.name = _data["name"];
      this.salt = _data["salt"];
      if (Array.isArray(_data["userTokens"])) {
        this.userTokens = [] as any;
        for (let item of _data["userTokens"])
          this.userTokens!.push(UserToken.fromJS(item));
      }
    }
  }

  static fromJS(data: any): User {
    data = typeof data === 'object' ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["emailAddress"] = this.emailAddress;
    data["password"] = this.password;
    data["name"] = this.name;
    data["salt"] = this.salt;
    if (Array.isArray(this.userTokens)) {
      data["userTokens"] = [];
      for (let item of this.userTokens)
        data["userTokens"].push(item.toJSON());
    }
    return data;
  }
}

export interface IUser {
  id?: number;
  emailAddress?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
  salt?: string | undefined;
  userTokens?: UserToken[] | undefined;
}

export class UserApiResponse implements IUserApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  readonly headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  readonly trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  readonly isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: User;

  constructor(data?: IUserApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.version = _data["version"] ? Version.fromJS(_data["version"]) : <any>undefined;
      this.content = _data["content"] ? HttpContent.fromJS(_data["content"]) : <any>undefined;
      this.statusCode = _data["statusCode"];
      this.reasonPhrase = _data["reasonPhrase"];
      if (Array.isArray(_data["headers"])) {
        (<any>this).headers = [] as any;
        for (let item of _data["headers"])
          (<any>this).headers!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      if (Array.isArray(_data["trailingHeaders"])) {
        (<any>this).trailingHeaders = [] as any;
        for (let item of _data["trailingHeaders"])
          (<any>this).trailingHeaders!.push(StringStringIEnumerableKeyValuePair.fromJS(item));
      }
      this.requestMessage = _data["requestMessage"] ? HttpRequestMessage.fromJS(_data["requestMessage"]) : <any>undefined;
      (<any>this).isSuccessStatusCode = _data["isSuccessStatusCode"];
      this.httpResponseCode = _data["httpResponseCode"];
      this.responseMessage = _data["responseMessage"];
      this.status = _data["status"];
      this.responseObject = _data["responseObject"] ? User.fromJS(_data["responseObject"]) : <any>undefined;
    }
  }

  static fromJS(data: any): UserApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["version"] = this.version ? this.version.toJSON() : <any>undefined;
    data["content"] = this.content ? this.content.toJSON() : <any>undefined;
    data["statusCode"] = this.statusCode;
    data["reasonPhrase"] = this.reasonPhrase;
    if (Array.isArray(this.headers)) {
      data["headers"] = [];
      for (let item of this.headers)
        data["headers"].push(item.toJSON());
    }
    if (Array.isArray(this.trailingHeaders)) {
      data["trailingHeaders"] = [];
      for (let item of this.trailingHeaders)
        data["trailingHeaders"].push(item.toJSON());
    }
    data["requestMessage"] = this.requestMessage ? this.requestMessage.toJSON() : <any>undefined;
    data["isSuccessStatusCode"] = this.isSuccessStatusCode;
    data["httpResponseCode"] = this.httpResponseCode;
    data["responseMessage"] = this.responseMessage;
    data["status"] = this.status;
    data["responseObject"] = this.responseObject ? this.responseObject.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUserApiResponse {
  version?: Version;
  content?: HttpContent;
  statusCode?: HttpStatusCode;
  reasonPhrase?: string | undefined;
  headers?: StringStringIEnumerableKeyValuePair[] | undefined;
  trailingHeaders?: StringStringIEnumerableKeyValuePair[] | undefined;
  requestMessage?: HttpRequestMessage;
  isSuccessStatusCode?: boolean;
  httpResponseCode?: HttpStatusCode;
  responseMessage?: string | undefined;
  status?: Status;
  responseObject?: User;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new ApiException(message, status, response, headers, null);
}
